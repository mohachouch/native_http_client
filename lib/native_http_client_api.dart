// Autogenerated from Pigeon (v4.2.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum EventMessageType {
  responseStarted,
  readCompleted,
}

class ResponseStarted {
  ResponseStarted({
    required this.headers,
    required this.statusCode,
    required this.statusText,
    required this.isRedirect,
  });

  Map<String?, List<String?>?> headers;
  int statusCode;
  String statusText;
  bool isRedirect;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['headers'] = headers;
    pigeonMap['statusCode'] = statusCode;
    pigeonMap['statusText'] = statusText;
    pigeonMap['isRedirect'] = isRedirect;
    return pigeonMap;
  }

  static ResponseStarted decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ResponseStarted(
      headers: (pigeonMap['headers'] as Map<Object?, Object?>?)!
          .cast<String?, List<String?>?>(),
      statusCode: pigeonMap['statusCode']! as int,
      statusText: pigeonMap['statusText']! as String,
      isRedirect: pigeonMap['isRedirect']! as bool,
    );
  }
}

class ReadCompleted {
  ReadCompleted({
    required this.data,
  });

  Uint8List data;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['data'] = data;
    return pigeonMap;
  }

  static ReadCompleted decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return ReadCompleted(
      data: pigeonMap['data']! as Uint8List,
    );
  }
}

/// Encapsulates a message sent from Cronet to the Dart client.
class EventMessage {
  EventMessage({
    required this.type,
    this.responseStarted,
    this.readCompleted,
  });

  EventMessageType type;
  ResponseStarted? responseStarted;
  ReadCompleted? readCompleted;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['type'] = type.index;
    pigeonMap['responseStarted'] = responseStarted?.encode();
    pigeonMap['readCompleted'] = readCompleted?.encode();
    return pigeonMap;
  }

  static EventMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return EventMessage(
      type: EventMessageType.values[pigeonMap['type']! as int],
      responseStarted: pigeonMap['responseStarted'] != null
          ? ResponseStarted.decode(pigeonMap['responseStarted']!)
          : null,
      readCompleted: pigeonMap['readCompleted'] != null
          ? ReadCompleted.decode(pigeonMap['readCompleted']!)
          : null,
    );
  }
}

class _NativeHttpClientApiCodec extends StandardMessageCodec {
  const _NativeHttpClientApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is EventMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is ReadCompleted) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is ResponseStarted) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return EventMessage.decode(readValue(buffer)!);

      case 129:
        return ReadCompleted.decode(readValue(buffer)!);

      case 130:
        return ResponseStarted.decode(readValue(buffer)!);

      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NativeHttpClientApi {
  /// Constructor for [NativeHttpClientApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeHttpClientApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _NativeHttpClientApiCodec();

  Future<String?> askCertificateAlias() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeHttpClientApi.askCertificateAlias', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return (replyMap['result'] as String?);
    }
  }

  Future<void> initializeClient(String? arg_alias) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeHttpClientApi.initializeClient', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_alias]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<String> sendRequest(String arg_url, String arg_method,
      Uint8List arg_body, Map<String?, String?> arg_headers) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeHttpClientApi.sendRequest', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap = await channel
            .send(<Object?>[arg_url, arg_method, arg_body, arg_headers])
        as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as String?)!;
    }
  }

  Future<void> closeClient() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeHttpClientApi.closeClient', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }

  Future<void> dummy(EventMessage arg_message) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeHttpClientApi.dummy', codec,
        binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_message]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error =
          (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}
